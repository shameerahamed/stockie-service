swagger: "2.0"
info:
  description: "Stockie - Store Management."
  version: "1.0.0"
  title: "Swagger store"
  termsOfService: "http://stockie.MyProd.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "product"
  description: "Operations about product"
  externalDocs:
    description: "Find out more about our product"
    url: "http://swagger.io"
- name: "brand"
  description: "Operations about Product-Brand"
- name: "type"
  description: "Operations about Product-Type"
- name: "customer"
  description: "Everything about your customer"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Store orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /product:
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
    put:
      tags:
      - "product"
      summary: "To update product details to the store"
      description: ""
      operationId: "UpdateProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /product/{productId}:
    get:
      tags:
      - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Product'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
      security:
      - api_key: []
    delete:
      tags:
      - "product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "ProductId to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
      security:
      - api_key: []
  /product/brand:
    post:
      tags:
      - "brand"
      summary: "Add a new Product-Brand to the store"
      description: ""
      operationId: "addProductBrand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product-Brand object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/ProductBrand"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
    put:
      tags:
      - "brand"
      summary: "To Update Product-Brand to the store"
      description: ""
      operationId: "updateProductBrand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product-Brand object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/ProductBrand"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /product/brand/{brandId}:
    get:
      tags:
      - "brand"
      summary: "Find product-brand by ID"
      description: "Returns a single product-brand"
      operationId: "getProductBrandById"
      produces:
      - "application/json"
      parameters:
      - name: "brandId"
        in: "path"
        description: "ID of product-brand to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ProductBrand'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product-Brand not found"
      security:
      - api_key: []
    delete:
      tags:
      - "brand"
      summary: "Deletes a brand"
      description: ""
      operationId: "deleteBrand"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "brandId"
        in: "path"
        description: "brandId to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Brand not found"
      security:
      - api_key: []
  /product/type:
    post:
      tags:
      - "type"
      summary: "Add a new Product-Type to the store"
      description: ""
      operationId: "addProductType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product-Type object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/ProductType"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
    put:
      tags:
      - "type"
      summary: "To Update Product-Type to the store"
      description: ""
      operationId: "updateProductType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product-Type object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/ProductType"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /product/type/{typeId}:
    get:
      tags:
      - "type"
      summary: "Find product-type by ID"
      description: "Returns a single product-type"
      operationId: "getProductTypeById"
      produces:
      - "application/json"
      parameters:
      - name: "typeId"
        in: "path"
        description: "ID of product-type to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ProductType'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product-Type not found"
      security:
      - api_key: []
    delete:
      tags:
      - "type"
      summary: "Deletes a type"
      description: ""
      operationId: "deleteType"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "typeId"
        in: "path"
        description: "typeId to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Type not found"
      security:
      - api_key: []
  /customer:
    post:
      tags:
      - "customer"
      summary: "Add a new customer to the store"
      description: ""
      operationId: "addCustomer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /customer/{customerId}:
    put:
      tags:
      - "customer"
      summary: "Updates a customer in the store with form data"
      description: ""
      operationId: "updateCustomerWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the customer"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the customer"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
    get:
      tags:
      - "customer"
      summary: "Find customer by ID"
      description: "Returns a single customer"
      operationId: "getCustomerById"
      produces:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Customer"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
    delete:
      tags:
      - "customer"
      summary: "Deletes a customers"
      description: ""
      operationId: "deleteCustomer"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "customerId"
        in: "path"
        description: "Customer id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    put:
      tags:
      - "store"
      summary: "Place an order"
      description: ""
      operationId: "orderId"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The userId that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid userId supplied"
        404:
          description: "User not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      prodName:
        type: "string"
        format: "string"
      quantity:
        type: "integer"
        format: "int32"
      price:
        type: "number"
        format: "float"
      quantitySold:
        type: "integer"
        format: "int64"
      totalQuantity:
        type: "integer"
        format: "int64"
      typeId:
        $ref: '#definitions/ProductType'
      brandId:
        $ref: '#definitions/ProductBrand'
    xml:
      name: "Product"
  ProductType:
    type: "object"
    properties:
      typeId:
        type: "integer"
        format: "int64"
      typeDesc:
        type: "string"
        format: "string"
    xml:
      name: "ProductType"
  ProductBrand:
    type: "object"
    properties:
      brandId:
        type: "integer"
        format: "int64"
      brandName:
        type: "string"
        format: "string"
    xml:
      name: "ProductBrand"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      customerId:
        type: "integer"
        format: "int64"
      orderDate:
        type: "string"
        format: "date-time"
      discount:
        type: "number"
        format: "float"
      status:
        type: "string"
        description: "Order status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      payType:
        type: "string"
        format: "string"
      ccType:
        type: "string"
        format: "string"
      paymentDate:
        type: "string"
        format: "date-time"
      netAmount:
        type: "number"
        format: "float"
      tax:
        type: "integer"
        format: "int32"
      subTotal:
        type: "number"
        format: "float"
      oldBalance:
        type: "number"
        format: "float"
      totalAmount:
        type: "number"
        format: "float"
      changeReturn:
        type: "number"
        format: "float"
      receivedAmount:
        type: "number"
        format: "float"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  OrderItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      orderId:
        $ref: '#/definitions/Order'
      prodId:
       $ref: '#/definitions/Product'
      amount:
        type: "number"
        format: "float"
      quantity:
        type: "integer"
        format: "int64"
    xml:
      name: "OrderItem"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
      userRole:
        $ref: "#/definitions/UserRole"
    xml:
      name: "User"
  UserRole:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      role:
        type: "string"
    xml:
      name: "UserRole"  
  Customer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      custName:
        type: "string"
        format: "string"
      address:
        type: "string"
        format: "string"
      phoneNo:
        type: "integer"
        format: "int64"
      email:
        type: "string"
        format: "string"
      regDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Customer"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"